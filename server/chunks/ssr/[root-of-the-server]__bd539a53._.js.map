{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 223, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\nimport {googleAI} from '@genkit-ai/googleai';\n\nexport const ai = genkit({\n  plugins: [googleAI()],\n  model: 'googleai/gemini-2.5-flash',\n});\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 244, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/verify-historical-connection.ts"],"sourcesContent":["'use server';\n\n/**\n * @fileOverview An AI agent for verifying historical connections between cards.\n *\n * - verifyHistoricalConnection - A function that verifies the historical connection explanation.\n * - VerifyHistoricalConnectionInput - The input type for the verifyHistoricalConnection function.\n * - VerifyHistoricalConnectionOutput - The return type for the verifyHistoricalConnection function.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\n\nconst VerifyHistoricalConnectionInputSchema = z.object({\n  card1Name: z.string().describe('The name of the first card.'),\n  card2Name: z.string().describe('The name of the second card.'),\n  explanation: z.string().describe('The explanation of the historical connection between the two cards.'),\n});\nexport type VerifyHistoricalConnectionInput = z.infer<typeof VerifyHistoricalConnectionInputSchema>;\n\nconst VerifyHistoricalConnectionOutputSchema = z.object({\n  isValid: z.boolean().describe('Whether the historical connection explanation is valid.'),\n  reason: z.string().describe('The reasoning behind the validity determination.'),\n});\nexport type VerifyHistoricalConnectionOutput = z.infer<typeof VerifyHistoricalConnectionOutputSchema>;\n\nexport async function verifyHistoricalConnection(input: VerifyHistoricalConnectionInput): Promise<VerifyHistoricalConnectionOutput> {\n  return verifyHistoricalConnectionFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'verifyHistoricalConnectionPrompt',\n  input: {schema: VerifyHistoricalConnectionInputSchema},\n  output: {schema: VerifyHistoricalConnectionOutputSchema},\n  prompt: `You are an expert historian. You will be given two cards, and an explanation of how they are historically connected.\nYour job is to determine whether the explanation is valid, and provide a reason for your determination.\n\nCard 1: {{{card1Name}}}\nCard 2: {{{card2Name}}}\nExplanation: {{{explanation}}}\n\nIs the explanation valid? Answer in the following JSON format:\n{\n  \"isValid\": boolean,\n  \"reason\": string\n}`, \n});\n\nconst verifyHistoricalConnectionFlow = ai.defineFlow(\n  {\n    name: 'verifyHistoricalConnectionFlow',\n    inputSchema: VerifyHistoricalConnectionInputSchema,\n    outputSchema: VerifyHistoricalConnectionOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,wCAAwC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACrD,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC/B,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC/B,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACnC;AAGA,MAAM,yCAAyC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACtD,SAAS,uIAAA,CAAA,IAAC,CAAC,OAAO,GAAG,QAAQ,CAAC;IAC9B,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC9B;AAGO,eAAe,2BAA2B,KAAsC;IACrF,OAAO,+BAA+B;AACxC;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAAqC;IACrD,QAAQ;QAAC,QAAQ;IAAsC;IACvD,QAAQ,CAAC;;;;;;;;;;;CAWV,CAAC;AACF;AAEA,MAAM,iCAAiC,mHAAA,CAAA,KAAE,CAAC,UAAU,CAClD;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IA/BoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 315, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/types.ts"],"sourcesContent":["import {z} from 'genkit';\n\nconst CardSchema = z.object({\n  id: z.string(),\n  name: z.string(),\n  type: z.enum(['Person', 'Event']),\n  description: z.string(),\n});\n\nexport const FindMatchingCardInputSchema = z.object({\n  request: z\n    .string()\n    .describe('The textual request for a card from the current player.'),\n  opponentHand: z\n    .array(CardSchema)\n    .describe(\"An array of card objects in the opponent's hand.\"),\n});\nexport type FindMatchingCardInput = z.infer<typeof FindMatchingCardInputSchema>;\n\nexport const FindMatchingCardOutputSchema = z.object({\n  cardId: z\n    .string()\n    .optional()\n    .describe(\n      \"The ID of the card in the opponent's hand that matches the request. If no card matches, this will be undefined.\"\n    ),\n  reason: z\n    .string()\n    .describe(\n      'A brief explanation of why the card matches the request, or why no card matches.'\n    ),\n});\nexport type FindMatchingCardOutput = z.infer<\n  typeof FindMatchingCardOutputSchema\n>;\n\n    "],"names":[],"mappings":";;;;AAAA;AAAA;;AAEA,MAAM,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC1B,IAAI,uIAAA,CAAA,IAAC,CAAC,MAAM;IACZ,MAAM,uIAAA,CAAA,IAAC,CAAC,MAAM;IACd,MAAM,uIAAA,CAAA,IAAC,CAAC,IAAI,CAAC;QAAC;QAAU;KAAQ;IAChC,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM;AACvB;AAEO,MAAM,8BAA8B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAClD,SAAS,uIAAA,CAAA,IAAC,CACP,MAAM,GACN,QAAQ,CAAC;IACZ,cAAc,uIAAA,CAAA,IAAC,CACZ,KAAK,CAAC,YACN,QAAQ,CAAC;AACd;AAGO,MAAM,+BAA+B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACnD,QAAQ,uIAAA,CAAA,IAAC,CACN,MAAM,GACN,QAAQ,GACR,QAAQ,CACP;IAEJ,QAAQ,uIAAA,CAAA,IAAC,CACN,MAAM,GACN,QAAQ,CACP;AAEN","debugId":null}},
    {"offset": {"line": 345, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/ai/flows/find-matching-card.ts"],"sourcesContent":["'use server';\n\n/**\n * @fileOverview An AI agent for finding a matching card in a player's hand based on a request.\n *\n * - findMatchingCard - A function that checks if any card in a hand matches a given request.\n */\n\nimport {ai} from '@/ai/genkit';\nimport {z} from 'genkit';\nimport {\n  FindMatchingCardInputSchema,\n  FindMatchingCardOutputSchema,\n  type FindMatchingCardInput,\n  type FindMatchingCardOutput,\n} from './types';\n\nexport async function findMatchingCard(\n  input: FindMatchingCardInput\n): Promise<FindMatchingCardOutput> {\n  return findMatchingCardFlow(input);\n}\n\nconst prompt = ai.definePrompt({\n  name: 'findMatchingCardPrompt',\n  input: {schema: FindMatchingCardInputSchema},\n  output: {schema: FindMatchingCardOutputSchema},\n  prompt: `You are an arbiter in a historical card game. Your task is to determine if an opponent has a card that matches the current player's request.\n\n  The player is requesting a card with this description:\n  \"{{{request}}}\"\n\n  Here are the cards in the opponent's hand:\n  {{#each opponentHand}}\n  - Card ID: {{{this.id}}}, Name: \"{{{this.name}}}\", Description: \"{{{this.description}}}\"\n  {{/each}}\n\n  Review the opponent's hand. If one of the cards is a reasonable match for the player's request, return the ID of that card and a brief justification. The match should be based on the card's name and description.\n\n  If no card is a good match, return a reason explaining why none of the cards fit the request. Only return a card if it's a strong, direct match. Be strict.\n  `,\n});\n\nconst findMatchingCardFlow = ai.defineFlow(\n  {\n    name: 'findMatchingCardFlow',\n    inputSchema: FindMatchingCardInputSchema,\n    outputSchema: FindMatchingCardOutputSchema,\n  },\n  async input => {\n    const {output} = await prompt(input);\n    return output!;\n  }\n);\n\n    "],"names":[],"mappings":";;;;;AAEA;;;;CAIC,GAED;AAEA;;;;;;AAOO,eAAe,iBACpB,KAA4B;IAE5B,OAAO,qBAAqB;AAC9B;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ,2HAAA,CAAA,8BAA2B;IAAA;IAC3C,QAAQ;QAAC,QAAQ,2HAAA,CAAA,+BAA4B;IAAA;IAC7C,QAAQ,CAAC;;;;;;;;;;;;;EAaT,CAAC;AACH;AAEA,MAAM,uBAAuB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACxC;IACE,MAAM;IACN,aAAa,2HAAA,CAAA,8BAA2B;IACxC,cAAc,2HAAA,CAAA,+BAA4B;AAC5C,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IAnCoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 406, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/game/actions.ts"],"sourcesContent":["'use server';\n\nimport { verifyHistoricalConnection, VerifyHistoricalConnectionInput, VerifyHistoricalConnectionOutput } from '@/ai/flows/verify-historical-connection';\nimport { findMatchingCard } from '@/ai/flows/find-matching-card';\nimport type { FindMatchingCardInput, FindMatchingCardOutput } from '@/ai/flows/types';\n\n\nexport async function verifyConnectionAction(input: VerifyHistoricalConnectionInput): Promise<VerifyHistoricalConnectionOutput> {\n  try {\n    const result = await verifyHistoricalConnection(input);\n    return result;\n  } catch (error) {\n    console.error('Error verifying connection:', error);\n    return {\n      isValid: false,\n      reason: 'An error occurred while communicating with the historian AI. Please try again.',\n    };\n  }\n}\n\nexport async function findMatchingCardAction(input: FindMatchingCardInput): Promise<FindMatchingCardOutput> {\n    try {\n        const result = await findMatchingCard(input);\n        return result;\n    } catch (error) {\n        console.error('Error finding matching card:', error);\n        return {\n            cardId: undefined,\n            reason: 'An error occurred while communicating with the arbiter AI. Please try again.',\n        };\n    }\n}\n\n    "],"names":[],"mappings":";;;;;;AAEA;AACA;;;;;;AAIO,eAAe,uBAAuB,KAAsC;IACjF,IAAI;QACF,MAAM,SAAS,MAAM,CAAA,GAAA,wJAAA,CAAA,6BAA0B,AAAD,EAAE;QAChD,OAAO;IACT,EAAE,OAAO,OAAO;QACd,QAAQ,KAAK,CAAC,+BAA+B;QAC7C,OAAO;YACL,SAAS;YACT,QAAQ;QACV;IACF;AACF;AAEO,eAAe,uBAAuB,KAA4B;IACrE,IAAI;QACA,MAAM,SAAS,MAAM,CAAA,GAAA,8IAAA,CAAA,mBAAgB,AAAD,EAAE;QACtC,OAAO;IACX,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,gCAAgC;QAC9C,OAAO;YACH,QAAQ;YACR,QAAQ;QACZ;IACJ;AACJ;;;IAxBsB;IAaA;;AAbA,+OAAA;AAaA,+OAAA","debugId":null}},
    {"offset": {"line": 456, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/.next-internal/server/app/game/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {findMatchingCardAction as '402e3b7add7b9be4f67164dfc4473eadb3cc247645'} from 'ACTIONS_MODULE0'\nexport {verifyConnectionAction as '4046bf87ba69b11beb92cd60b45611f58b805b7d43'} from 'ACTIONS_MODULE0'\n"],"names":[],"mappings":";AAAA","debugId":null}},
    {"offset": {"line": 511, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/game/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/game/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/game/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAyR,GACtT,uDACA","debugId":null}},
    {"offset": {"line": 525, "column": 0}, "map": {"version":3,"sources":["file:///home/user/studio/src/app/game/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/game/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/game/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAqQ,GAClS,mCACA","debugId":null}},
    {"offset": {"line": 539, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}